// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 50;
	objects = {

/* Begin PBXBuildFile section */
		F23D92BE2232A69B00F0B9EC /* Path Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F23D92BD2232A69B00F0B9EC /* Path Sum.cpp */; };
		F23D92C02232A6EB00F0B9EC /* Path Sum II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F23D92BF2232A6EB00F0B9EC /* Path Sum II.cpp */; };
		F23D92C4223415EE00F0B9EC /* Squares of a Sorted Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F23D92C3223415EE00F0B9EC /* Squares of a Sorted Array.cpp */; };
		F23D92C8223417B100F0B9EC /* Sort Array By Parity II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F23D92C7223417B100F0B9EC /* Sort Array By Parity II.cpp */; };
		F25A37E2221561E000E24058 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F25A37E1221561E000E24058 /* main.cpp */; };
		F271D205222FFBB8005606F5 /* Best Time to Buy and Sell Stock.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D195222FFBB8005606F5 /* Best Time to Buy and Sell Stock.cpp */; };
		F271D206222FFBB8005606F5 /* Min Cost Climbing Stairs.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D196222FFBB8005606F5 /* Min Cost Climbing Stairs.cpp */; };
		F271D207222FFBB8005606F5 /* Climbing Stairs.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D197222FFBB8005606F5 /* Climbing Stairs.cpp */; };
		F271D208222FFBB8005606F5 /* Maximum Subarray.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D198222FFBB8005606F5 /* Maximum Subarray.cpp */; };
		F271D209222FFBB8005606F5 /* Range Sum Query - Immutable.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D199222FFBB8005606F5 /* Range Sum Query - Immutable.cpp */; };
		F271D20A222FFBB8005606F5 /* House Robber.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D19A222FFBB8005606F5 /* House Robber.cpp */; };
		F271D20B222FFBB8005606F5 /* Find the Difference.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D19D222FFBB8005606F5 /* Find the Difference.cpp */; };
		F271D20C222FFBB8005606F5 /* Jewels and Stones.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D19E222FFBB8005606F5 /* Jewels and Stones.cpp */; };
		F271D20D222FFBB8005606F5 /* Intersection of Two Arrays II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D19F222FFBB8005606F5 /* Intersection of Two Arrays II.cpp */; };
		F271D20E222FFBB8005606F5 /* Find All Anagrams in a String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1A0222FFBB8005606F5 /* Find All Anagrams in a String.cpp */; };
		F271D20F222FFBB8005606F5 /* First Unique Character in a String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1A1222FFBB8005606F5 /* First Unique Character in a String.cpp */; };
		F271D210222FFBB8005606F5 /* Valid Anagram.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1A2222FFBB8005606F5 /* Valid Anagram.cpp */; };
		F271D211222FFBB8005606F5 /* Contains Duplicate.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1A3222FFBB8005606F5 /* Contains Duplicate.cpp */; };
		F271D212222FFBB8005606F5 /* Intersection of Two Arrays.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1A4222FFBB8005606F5 /* Intersection of Two Arrays.cpp */; };
		F271D213222FFBB8005606F5 /* QuickSort.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1A6222FFBB8005606F5 /* QuickSort.cpp */; };
		F271D214222FFBB8005606F5 /* Subtree of Another Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1A9222FFBB8005606F5 /* Subtree of Another Tree.cpp */; };
		F271D215222FFBB8005606F5 /* Same Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1AA222FFBB8005606F5 /* Same Tree.cpp */; };
		F271D216222FFBB8005606F5 /* Maximum Depth of Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1AB222FFBB8005606F5 /* Maximum Depth of Binary Tree.cpp */; };
		F271D217222FFBB8005606F5 /* Convert Sorted Array to Binary Search Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1AC222FFBB8005606F5 /* Convert Sorted Array to Binary Search Tree.cpp */; };
		F271D218222FFBB8005606F5 /* Symmetric Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1AD222FFBB8005606F5 /* Symmetric Tree.cpp */; };
		F271D219222FFBB8005606F5 /* Two Sum IV - Input is a BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1AE222FFBB8005606F5 /* Two Sum IV - Input is a BST.cpp */; };
		F271D21A222FFBB8005606F5 /* Path Sum III.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1AF222FFBB8005606F5 /* Path Sum III.cpp */; };
		F271D21B222FFBB8005606F5 /* Convert BST to Greater Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1B0222FFBB8005606F5 /* Convert BST to Greater Tree.cpp */; };
		F271D21C222FFBB8005606F5 /* Binary Tree Level Order Traversal II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1B1222FFBB8005606F5 /* Binary Tree Level Order Traversal II.cpp */; };
		F271D21D222FFBB8005606F5 /* Invert Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1B2222FFBB8005606F5 /* Invert Binary Tree.cpp */; };
		F271D21E222FFBB8005606F5 /* Merge Two Binary Trees.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1B3222FFBB8005606F5 /* Merge Two Binary Trees.cpp */; };
		F271D21F222FFBB8005606F5 /* Diameter of Binary Tree.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1B4222FFBB8005606F5 /* Diameter of Binary Tree.cpp */; };
		F271D220222FFBB8005606F5 /* Binary Tree Level Order Traversal.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1B6222FFBB8005606F5 /* Binary Tree Level Order Traversal.cpp */; };
		F271D221222FFBB8005606F5 /* Binary Tree Inorder Traversal.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1B7222FFBB8005606F5 /* Binary Tree Inorder Traversal.cpp */; };
		F271D222222FFBB8005606F5 /* Flatten Binary Tree to Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1B8222FFBB8005606F5 /* Flatten Binary Tree to Linked List.cpp */; };
		F271D223222FFBB8005606F5 /* Backspace String Compare.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1BB222FFBB8005606F5 /* Backspace String Compare.cpp */; };
		F271D224222FFBB9005606F5 /* Baseball Game.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1BC222FFBB8005606F5 /* Baseball Game.cpp */; };
		F271D225222FFBB9005606F5 /* Implement Stack using Queues.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1BD222FFBB8005606F5 /* Implement Stack using Queues.cpp */; };
		F271D226222FFBB9005606F5 /* Implement Queue using Stacks.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1BE222FFBB8005606F5 /* Implement Queue using Stacks.cpp */; };
		F271D227222FFBB9005606F5 /* Min Stack.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1BF222FFBB8005606F5 /* Min Stack.cpp */; };
		F271D228222FFBB9005606F5 /* Next Greater Element I.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1C0222FFBB8005606F5 /* Next Greater Element I.cpp */; };
		F271D229222FFBB9005606F5 /* Valid Parentheses.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1C1222FFBB8005606F5 /* Valid Parentheses.cpp */; };
		F271D22A222FFBB9005606F5 /* Plus One.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1C4222FFBB8005606F5 /* Plus One.cpp */; };
		F271D22B222FFBB9005606F5 /* Happy Number.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1C5222FFBB8005606F5 /* Happy Number.cpp */; };
		F271D22C222FFBB9005606F5 /* Count Primes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1C6222FFBB8005606F5 /* Count Primes.cpp */; };
		F271D22D222FFBB9005606F5 /* Two Sum.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1C7222FFBB8005606F5 /* Two Sum.cpp */; };
		F271D22E222FFBB9005606F5 /* Missing Number.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1C8222FFBB8005606F5 /* Missing Number.cpp */; };
		F271D22F222FFBB9005606F5 /* Add Binary.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1C9222FFBB8005606F5 /* Add Binary.cpp */; };
		F271D230222FFBB9005606F5 /* Reverse Integer.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1CA222FFBB8005606F5 /* Reverse Integer.cpp */; };
		F271D231222FFBB9005606F5 /* Majority Element.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1CB222FFBB8005606F5 /* Majority Element.cpp */; };
		F271D232222FFBB9005606F5 /* Sqrt(x).cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1CC222FFBB8005606F5 /* Sqrt(x).cpp */; };
		F271D233222FFBB9005606F5 /* Power of Three.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1CD222FFBB8005606F5 /* Power of Three.cpp */; };
		F271D234222FFBB9005606F5 /* Excel Sheet Column Number.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1CE222FFBB8005606F5 /* Excel Sheet Column Number.cpp */; };
		F271D235222FFBB9005606F5 /* Ugly Number.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1CF222FFBB8005606F5 /* Ugly Number.cpp */; };
		F271D236222FFBB9005606F5 /* Factorial Trailing Zeroes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1D0222FFBB8005606F5 /* Factorial Trailing Zeroes.cpp */; };
		F271D237222FFBB9005606F5 /* Intersection of Two Linked Lists.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1D3222FFBB8005606F5 /* Intersection of Two Linked Lists.cpp */; };
		F271D238222FFBB9005606F5 /* Remove Linked List Elements.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1D4222FFBB8005606F5 /* Remove Linked List Elements.cpp */; };
		F271D239222FFBB9005606F5 /* Design Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1D5222FFBB8005606F5 /* Design Linked List.cpp */; };
		F271D23A222FFBB9005606F5 /* Merge Two Sorted Lists.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1D6222FFBB8005606F5 /* Merge Two Sorted Lists.cpp */; };
		F271D23B222FFBB9005606F5 /* Linked List Cycle.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1D7222FFBB8005606F5 /* Linked List Cycle.cpp */; };
		F271D23C222FFBB9005606F5 /* Middle of the Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1D8222FFBB8005606F5 /* Middle of the Linked List.cpp */; };
		F271D23D222FFBB9005606F5 /* Remove Duplicates from Sorted List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1D9222FFBB8005606F5 /* Remove Duplicates from Sorted List.cpp */; };
		F271D23E222FFBB9005606F5 /* Palindrome Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1DA222FFBB8005606F5 /* Palindrome Linked List.cpp */; };
		F271D23F222FFBB9005606F5 /* Reverse Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1DB222FFBB8005606F5 /* Reverse Linked List.cpp */; };
		F271D240222FFBB9005606F5 /* Delete Node in a Linked List.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1DC222FFBB8005606F5 /* Delete Node in a Linked List.cpp */; };
		F271D241222FFBB9005606F5 /* Add Two Numbers.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1DE222FFBB8005606F5 /* Add Two Numbers.cpp */; };
		F271D242222FFBB9005606F5 /* Linked List Cycle II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1DF222FFBB8005606F5 /* Linked List Cycle II.cpp */; };
		F271D243222FFBB9005606F5 /* Fizz Buzz.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1E2222FFBB8005606F5 /* Fizz Buzz.cpp */; };
		F271D244222FFBB9005606F5 /* Roman to Integer.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1E3222FFBB8005606F5 /* Roman to Integer.cpp */; };
		F271D245222FFBB9005606F5 /* Repeated Substring Pattern.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1E4222FFBB8005606F5 /* Repeated Substring Pattern.cpp */; };
		F271D246222FFBB9005606F5 /* CountAndSay.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1E5222FFBB8005606F5 /* CountAndSay.cpp */; };
		F271D247222FFBB9005606F5 /* Reverse String.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1E6222FFBB8005606F5 /* Reverse String.cpp */; };
		F271D248222FFBB9005606F5 /* Implement strStr().cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1E7222FFBB8005606F5 /* Implement strStr().cpp */; };
		F271D249222FFBB9005606F5 /* To Lower Case.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1E8222FFBB8005606F5 /* To Lower Case.cpp */; };
		F271D24A222FFBB9005606F5 /* Add Binary.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1E9222FFBB8005606F5 /* Add Binary.cpp */; };
		F271D24B222FFBB9005606F5 /* Valid Palindrome.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1EA222FFBB8005606F5 /* Valid Palindrome.cpp */; };
		F271D24C222FFBB9005606F5 /* Longest Common Prefix.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1EB222FFBB8005606F5 /* Longest Common Prefix.cpp */; };
		F271D24D222FFBB9005606F5 /* Multiply Strings.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1ED222FFBB8005606F5 /* Multiply Strings.cpp */; };
		F271D24E222FFBB9005606F5 /* Integer to Roman.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1EE222FFBB8005606F5 /* Integer to Roman.cpp */; };
		F271D24F222FFBB9005606F5 /* Longest Substring Without Repeating Characters.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1EF222FFBB8005606F5 /* Longest Substring Without Repeating Characters.cpp */; };
		F271D250222FFBB9005606F5 /* Reverse Bits.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1F2222FFBB8005606F5 /* Reverse Bits.cpp */; };
		F271D251222FFBB9005606F5 /* Hamming Distance.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1F3222FFBB8005606F5 /* Hamming Distance.cpp */; };
		F271D252222FFBB9005606F5 /* Number of 1 Bits.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1F4222FFBB8005606F5 /* Number of 1 Bits.cpp */; };
		F271D253222FFBB9005606F5 /* Single Number.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1F5222FFBB8005606F5 /* Single Number.cpp */; };
		F271D254222FFBB9005606F5 /* Sum of Two Integers.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1F6222FFBB8005606F5 /* Sum of Two Integers.cpp */; };
		F271D255222FFBB9005606F5 /* Counting Bits.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1F8222FFBB8005606F5 /* Counting Bits.cpp */; };
		F271D256222FFBB9005606F5 /* Find All Numbers Disappeared in an Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1FB222FFBB8005606F5 /* Find All Numbers Disappeared in an Array.cpp */; };
		F271D257222FFBB9005606F5 /* Merge Sorted Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1FC222FFBB8005606F5 /* Merge Sorted Array.cpp */; };
		F271D258222FFBB9005606F5 /* Pascal's Triangle.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1FD222FFBB8005606F5 /* Pascal's Triangle.cpp */; };
		F271D259222FFBB9005606F5 /* Rotate Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1FE222FFBB8005606F5 /* Rotate Array.cpp */; };
		F271D25A222FFBB9005606F5 /* Shortest Unsorted Continuous Subarray.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D1FF222FFBB8005606F5 /* Shortest Unsorted Continuous Subarray.cpp */; };
		F271D25B222FFBB9005606F5 /* Remove Duplicates from Sorted Array.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D200222FFBB8005606F5 /* Remove Duplicates from Sorted Array.cpp */; };
		F271D25C222FFBB9005606F5 /* Move Zeroes.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D201222FFBB8005606F5 /* Move Zeroes.cpp */; };
		F271D25D222FFBB9005606F5 /* Fibonacci Number.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D202222FFBB8005606F5 /* Fibonacci Number.cpp */; };
		F271D25E222FFBB9005606F5 /* Product of Array Except Self.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D204222FFBB8005606F5 /* Product of Array Except Self.cpp */; };
		F271D26022317417005606F5 /* Majority Element II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = F271D25F22317417005606F5 /* Majority Element II.cpp */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		F25A37DC221561E000E24058 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		F23D92BD2232A69B00F0B9EC /* Path Sum.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "Path Sum.cpp"; sourceTree = "<group>"; };
		F23D92BF2232A6EB00F0B9EC /* Path Sum II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "Path Sum II.cpp"; sourceTree = "<group>"; };
		F23D92C3223415EE00F0B9EC /* Squares of a Sorted Array.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "Squares of a Sorted Array.cpp"; sourceTree = "<group>"; };
		F23D92C7223417B100F0B9EC /* Sort Array By Parity II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "Sort Array By Parity II.cpp"; sourceTree = "<group>"; };
		F25A37DE221561E000E24058 /* Algorithm */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = Algorithm; sourceTree = BUILT_PRODUCTS_DIR; };
		F25A37E1221561E000E24058 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
		F271D0B9222FF5CA005606F5 /* PrefixHeader.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = PrefixHeader.pch; sourceTree = "<group>"; };
		F271D195222FFBB8005606F5 /* Best Time to Buy and Sell Stock.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Best Time to Buy and Sell Stock.cpp"; sourceTree = "<group>"; };
		F271D196222FFBB8005606F5 /* Min Cost Climbing Stairs.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Min Cost Climbing Stairs.cpp"; sourceTree = "<group>"; };
		F271D197222FFBB8005606F5 /* Climbing Stairs.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Climbing Stairs.cpp"; sourceTree = "<group>"; };
		F271D198222FFBB8005606F5 /* Maximum Subarray.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Maximum Subarray.cpp"; sourceTree = "<group>"; };
		F271D199222FFBB8005606F5 /* Range Sum Query - Immutable.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Range Sum Query - Immutable.cpp"; sourceTree = "<group>"; };
		F271D19A222FFBB8005606F5 /* House Robber.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "House Robber.cpp"; sourceTree = "<group>"; };
		F271D19D222FFBB8005606F5 /* Find the Difference.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find the Difference.cpp"; sourceTree = "<group>"; };
		F271D19E222FFBB8005606F5 /* Jewels and Stones.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Jewels and Stones.cpp"; sourceTree = "<group>"; };
		F271D19F222FFBB8005606F5 /* Intersection of Two Arrays II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Intersection of Two Arrays II.cpp"; sourceTree = "<group>"; };
		F271D1A0222FFBB8005606F5 /* Find All Anagrams in a String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find All Anagrams in a String.cpp"; sourceTree = "<group>"; };
		F271D1A1222FFBB8005606F5 /* First Unique Character in a String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "First Unique Character in a String.cpp"; sourceTree = "<group>"; };
		F271D1A2222FFBB8005606F5 /* Valid Anagram.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Valid Anagram.cpp"; sourceTree = "<group>"; };
		F271D1A3222FFBB8005606F5 /* Contains Duplicate.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Contains Duplicate.cpp"; sourceTree = "<group>"; };
		F271D1A4222FFBB8005606F5 /* Intersection of Two Arrays.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Intersection of Two Arrays.cpp"; sourceTree = "<group>"; };
		F271D1A6222FFBB8005606F5 /* QuickSort.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = QuickSort.cpp; sourceTree = "<group>"; };
		F271D1A9222FFBB8005606F5 /* Subtree of Another Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Subtree of Another Tree.cpp"; sourceTree = "<group>"; };
		F271D1AA222FFBB8005606F5 /* Same Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Same Tree.cpp"; sourceTree = "<group>"; };
		F271D1AB222FFBB8005606F5 /* Maximum Depth of Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Maximum Depth of Binary Tree.cpp"; sourceTree = "<group>"; };
		F271D1AC222FFBB8005606F5 /* Convert Sorted Array to Binary Search Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Convert Sorted Array to Binary Search Tree.cpp"; sourceTree = "<group>"; };
		F271D1AD222FFBB8005606F5 /* Symmetric Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Symmetric Tree.cpp"; sourceTree = "<group>"; };
		F271D1AE222FFBB8005606F5 /* Two Sum IV - Input is a BST.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Two Sum IV - Input is a BST.cpp"; sourceTree = "<group>"; };
		F271D1AF222FFBB8005606F5 /* Path Sum III.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Path Sum III.cpp"; sourceTree = "<group>"; };
		F271D1B0222FFBB8005606F5 /* Convert BST to Greater Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Convert BST to Greater Tree.cpp"; sourceTree = "<group>"; };
		F271D1B1222FFBB8005606F5 /* Binary Tree Level Order Traversal II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Binary Tree Level Order Traversal II.cpp"; sourceTree = "<group>"; };
		F271D1B2222FFBB8005606F5 /* Invert Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Invert Binary Tree.cpp"; sourceTree = "<group>"; };
		F271D1B3222FFBB8005606F5 /* Merge Two Binary Trees.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge Two Binary Trees.cpp"; sourceTree = "<group>"; };
		F271D1B4222FFBB8005606F5 /* Diameter of Binary Tree.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Diameter of Binary Tree.cpp"; sourceTree = "<group>"; };
		F271D1B6222FFBB8005606F5 /* Binary Tree Level Order Traversal.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Binary Tree Level Order Traversal.cpp"; sourceTree = "<group>"; };
		F271D1B7222FFBB8005606F5 /* Binary Tree Inorder Traversal.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Binary Tree Inorder Traversal.cpp"; sourceTree = "<group>"; };
		F271D1B8222FFBB8005606F5 /* Flatten Binary Tree to Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Flatten Binary Tree to Linked List.cpp"; sourceTree = "<group>"; };
		F271D1BB222FFBB8005606F5 /* Backspace String Compare.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Backspace String Compare.cpp"; sourceTree = "<group>"; };
		F271D1BC222FFBB8005606F5 /* Baseball Game.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Baseball Game.cpp"; sourceTree = "<group>"; };
		F271D1BD222FFBB8005606F5 /* Implement Stack using Queues.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Implement Stack using Queues.cpp"; sourceTree = "<group>"; };
		F271D1BE222FFBB8005606F5 /* Implement Queue using Stacks.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Implement Queue using Stacks.cpp"; sourceTree = "<group>"; };
		F271D1BF222FFBB8005606F5 /* Min Stack.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Min Stack.cpp"; sourceTree = "<group>"; };
		F271D1C0222FFBB8005606F5 /* Next Greater Element I.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Next Greater Element I.cpp"; sourceTree = "<group>"; };
		F271D1C1222FFBB8005606F5 /* Valid Parentheses.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Valid Parentheses.cpp"; sourceTree = "<group>"; };
		F271D1C4222FFBB8005606F5 /* Plus One.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Plus One.cpp"; sourceTree = "<group>"; };
		F271D1C5222FFBB8005606F5 /* Happy Number.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Happy Number.cpp"; sourceTree = "<group>"; };
		F271D1C6222FFBB8005606F5 /* Count Primes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Count Primes.cpp"; sourceTree = "<group>"; };
		F271D1C7222FFBB8005606F5 /* Two Sum.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Two Sum.cpp"; sourceTree = "<group>"; };
		F271D1C8222FFBB8005606F5 /* Missing Number.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Missing Number.cpp"; sourceTree = "<group>"; };
		F271D1C9222FFBB8005606F5 /* Add Binary.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Add Binary.cpp"; sourceTree = "<group>"; };
		F271D1CA222FFBB8005606F5 /* Reverse Integer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Integer.cpp"; sourceTree = "<group>"; };
		F271D1CB222FFBB8005606F5 /* Majority Element.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Majority Element.cpp"; sourceTree = "<group>"; };
		F271D1CC222FFBB8005606F5 /* Sqrt(x).cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sqrt(x).cpp"; sourceTree = "<group>"; };
		F271D1CD222FFBB8005606F5 /* Power of Three.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Power of Three.cpp"; sourceTree = "<group>"; };
		F271D1CE222FFBB8005606F5 /* Excel Sheet Column Number.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Excel Sheet Column Number.cpp"; sourceTree = "<group>"; };
		F271D1CF222FFBB8005606F5 /* Ugly Number.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Ugly Number.cpp"; sourceTree = "<group>"; };
		F271D1D0222FFBB8005606F5 /* Factorial Trailing Zeroes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Factorial Trailing Zeroes.cpp"; sourceTree = "<group>"; };
		F271D1D3222FFBB8005606F5 /* Intersection of Two Linked Lists.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Intersection of Two Linked Lists.cpp"; sourceTree = "<group>"; };
		F271D1D4222FFBB8005606F5 /* Remove Linked List Elements.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Linked List Elements.cpp"; sourceTree = "<group>"; };
		F271D1D5222FFBB8005606F5 /* Design Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Design Linked List.cpp"; sourceTree = "<group>"; };
		F271D1D6222FFBB8005606F5 /* Merge Two Sorted Lists.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge Two Sorted Lists.cpp"; sourceTree = "<group>"; };
		F271D1D7222FFBB8005606F5 /* Linked List Cycle.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Linked List Cycle.cpp"; sourceTree = "<group>"; };
		F271D1D8222FFBB8005606F5 /* Middle of the Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Middle of the Linked List.cpp"; sourceTree = "<group>"; };
		F271D1D9222FFBB8005606F5 /* Remove Duplicates from Sorted List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Duplicates from Sorted List.cpp"; sourceTree = "<group>"; };
		F271D1DA222FFBB8005606F5 /* Palindrome Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Palindrome Linked List.cpp"; sourceTree = "<group>"; };
		F271D1DB222FFBB8005606F5 /* Reverse Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Linked List.cpp"; sourceTree = "<group>"; };
		F271D1DC222FFBB8005606F5 /* Delete Node in a Linked List.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Delete Node in a Linked List.cpp"; sourceTree = "<group>"; };
		F271D1DE222FFBB8005606F5 /* Add Two Numbers.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Add Two Numbers.cpp"; sourceTree = "<group>"; };
		F271D1DF222FFBB8005606F5 /* Linked List Cycle II.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Linked List Cycle II.cpp"; sourceTree = "<group>"; };
		F271D1E2222FFBB8005606F5 /* Fizz Buzz.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Fizz Buzz.cpp"; sourceTree = "<group>"; };
		F271D1E3222FFBB8005606F5 /* Roman to Integer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Roman to Integer.cpp"; sourceTree = "<group>"; };
		F271D1E4222FFBB8005606F5 /* Repeated Substring Pattern.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Repeated Substring Pattern.cpp"; sourceTree = "<group>"; };
		F271D1E5222FFBB8005606F5 /* CountAndSay.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CountAndSay.cpp; sourceTree = "<group>"; };
		F271D1E6222FFBB8005606F5 /* Reverse String.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse String.cpp"; sourceTree = "<group>"; };
		F271D1E7222FFBB8005606F5 /* Implement strStr().cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Implement strStr().cpp"; sourceTree = "<group>"; };
		F271D1E8222FFBB8005606F5 /* To Lower Case.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "To Lower Case.cpp"; sourceTree = "<group>"; };
		F271D1E9222FFBB8005606F5 /* Add Binary.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Add Binary.cpp"; sourceTree = "<group>"; };
		F271D1EA222FFBB8005606F5 /* Valid Palindrome.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Valid Palindrome.cpp"; sourceTree = "<group>"; };
		F271D1EB222FFBB8005606F5 /* Longest Common Prefix.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Common Prefix.cpp"; sourceTree = "<group>"; };
		F271D1ED222FFBB8005606F5 /* Multiply Strings.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Multiply Strings.cpp"; sourceTree = "<group>"; };
		F271D1EE222FFBB8005606F5 /* Integer to Roman.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Integer to Roman.cpp"; sourceTree = "<group>"; };
		F271D1EF222FFBB8005606F5 /* Longest Substring Without Repeating Characters.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Longest Substring Without Repeating Characters.cpp"; sourceTree = "<group>"; };
		F271D1F2222FFBB8005606F5 /* Reverse Bits.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Reverse Bits.cpp"; sourceTree = "<group>"; };
		F271D1F3222FFBB8005606F5 /* Hamming Distance.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Hamming Distance.cpp"; sourceTree = "<group>"; };
		F271D1F4222FFBB8005606F5 /* Number of 1 Bits.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Number of 1 Bits.cpp"; sourceTree = "<group>"; };
		F271D1F5222FFBB8005606F5 /* Single Number.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Single Number.cpp"; sourceTree = "<group>"; };
		F271D1F6222FFBB8005606F5 /* Sum of Two Integers.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Sum of Two Integers.cpp"; sourceTree = "<group>"; };
		F271D1F8222FFBB8005606F5 /* Counting Bits.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Counting Bits.cpp"; sourceTree = "<group>"; };
		F271D1FB222FFBB8005606F5 /* Find All Numbers Disappeared in an Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Find All Numbers Disappeared in an Array.cpp"; sourceTree = "<group>"; };
		F271D1FC222FFBB8005606F5 /* Merge Sorted Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Merge Sorted Array.cpp"; sourceTree = "<group>"; };
		F271D1FD222FFBB8005606F5 /* Pascal's Triangle.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Pascal's Triangle.cpp"; sourceTree = "<group>"; };
		F271D1FE222FFBB8005606F5 /* Rotate Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Rotate Array.cpp"; sourceTree = "<group>"; };
		F271D1FF222FFBB8005606F5 /* Shortest Unsorted Continuous Subarray.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Shortest Unsorted Continuous Subarray.cpp"; sourceTree = "<group>"; };
		F271D200222FFBB8005606F5 /* Remove Duplicates from Sorted Array.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Remove Duplicates from Sorted Array.cpp"; sourceTree = "<group>"; };
		F271D201222FFBB8005606F5 /* Move Zeroes.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Move Zeroes.cpp"; sourceTree = "<group>"; };
		F271D202222FFBB8005606F5 /* Fibonacci Number.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Fibonacci Number.cpp"; sourceTree = "<group>"; };
		F271D204222FFBB8005606F5 /* Product of Array Except Self.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = "Product of Array Except Self.cpp"; sourceTree = "<group>"; };
		F271D25F22317417005606F5 /* Majority Element II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "Majority Element II.cpp"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		F25A37DB221561E000E24058 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		F23D92C1223415CB00F0B9EC /* Easy */ = {
			isa = PBXGroup;
			children = (
				F23D92C3223415EE00F0B9EC /* Squares of a Sorted Array.cpp */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		F25A37D5221561E000E24058 = {
			isa = PBXGroup;
			children = (
				F25A37E0221561E000E24058 /* Algorithm */,
				F25A37DF221561E000E24058 /* Products */,
			);
			sourceTree = "<group>";
		};
		F25A37DF221561E000E24058 /* Products */ = {
			isa = PBXGroup;
			children = (
				F25A37DE221561E000E24058 /* Algorithm */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		F25A37E0221561E000E24058 /* Algorithm */ = {
			isa = PBXGroup;
			children = (
				F271D1F9222FFBB8005606F5 /* Array */,
				F271D1F0222FFBB8005606F5 /* Bit Manipulation */,
				F271D193222FFBB8005606F5 /* Dynamic Programming */,
				F271D19B222FFBB8005606F5 /* Hash Table */,
				F271D1D1222FFBB8005606F5 /* Linked List */,
				F271D1C2222FFBB8005606F5 /* Math */,
				F271D1A5222FFBB8005606F5 /* Sort */,
				F271D1B9222FFBB8005606F5 /* Stack */,
				F271D1E0222FFBB8005606F5 /* String */,
				F271D1A7222FFBB8005606F5 /* Tree */,
				F25A37E1221561E000E24058 /* main.cpp */,
				F271D0B9222FF5CA005606F5 /* PrefixHeader.pch */,
			);
			path = Algorithm;
			sourceTree = "<group>";
		};
		F271D193222FFBB8005606F5 /* Dynamic Programming */ = {
			isa = PBXGroup;
			children = (
				F271D194222FFBB8005606F5 /* Easy */,
			);
			path = "Dynamic Programming";
			sourceTree = "<group>";
		};
		F271D194222FFBB8005606F5 /* Easy */ = {
			isa = PBXGroup;
			children = (
				F271D195222FFBB8005606F5 /* Best Time to Buy and Sell Stock.cpp */,
				F271D196222FFBB8005606F5 /* Min Cost Climbing Stairs.cpp */,
				F271D197222FFBB8005606F5 /* Climbing Stairs.cpp */,
				F271D198222FFBB8005606F5 /* Maximum Subarray.cpp */,
				F271D199222FFBB8005606F5 /* Range Sum Query - Immutable.cpp */,
				F271D19A222FFBB8005606F5 /* House Robber.cpp */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		F271D19B222FFBB8005606F5 /* Hash Table */ = {
			isa = PBXGroup;
			children = (
				F271D19C222FFBB8005606F5 /* Easy */,
			);
			path = "Hash Table";
			sourceTree = "<group>";
		};
		F271D19C222FFBB8005606F5 /* Easy */ = {
			isa = PBXGroup;
			children = (
				F271D19D222FFBB8005606F5 /* Find the Difference.cpp */,
				F271D19E222FFBB8005606F5 /* Jewels and Stones.cpp */,
				F271D19F222FFBB8005606F5 /* Intersection of Two Arrays II.cpp */,
				F271D1A0222FFBB8005606F5 /* Find All Anagrams in a String.cpp */,
				F271D1A1222FFBB8005606F5 /* First Unique Character in a String.cpp */,
				F271D1A2222FFBB8005606F5 /* Valid Anagram.cpp */,
				F271D1A3222FFBB8005606F5 /* Contains Duplicate.cpp */,
				F271D1A4222FFBB8005606F5 /* Intersection of Two Arrays.cpp */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		F271D1A5222FFBB8005606F5 /* Sort */ = {
			isa = PBXGroup;
			children = (
				F23D92C1223415CB00F0B9EC /* Easy */,
				F271D1A6222FFBB8005606F5 /* QuickSort.cpp */,
			);
			path = Sort;
			sourceTree = "<group>";
		};
		F271D1A7222FFBB8005606F5 /* Tree */ = {
			isa = PBXGroup;
			children = (
				F271D1A8222FFBB8005606F5 /* Easy */,
				F271D1B5222FFBB8005606F5 /* Medium */,
			);
			path = Tree;
			sourceTree = "<group>";
		};
		F271D1A8222FFBB8005606F5 /* Easy */ = {
			isa = PBXGroup;
			children = (
				F271D1A9222FFBB8005606F5 /* Subtree of Another Tree.cpp */,
				F271D1AA222FFBB8005606F5 /* Same Tree.cpp */,
				F271D1AD222FFBB8005606F5 /* Symmetric Tree.cpp */,
				F271D1AB222FFBB8005606F5 /* Maximum Depth of Binary Tree.cpp */,
				F271D1AC222FFBB8005606F5 /* Convert Sorted Array to Binary Search Tree.cpp */,
				F271D1AE222FFBB8005606F5 /* Two Sum IV - Input is a BST.cpp */,
				F23D92BD2232A69B00F0B9EC /* Path Sum.cpp */,
				F271D1AF222FFBB8005606F5 /* Path Sum III.cpp */,
				F271D1B0222FFBB8005606F5 /* Convert BST to Greater Tree.cpp */,
				F271D1B2222FFBB8005606F5 /* Invert Binary Tree.cpp */,
				F271D1B3222FFBB8005606F5 /* Merge Two Binary Trees.cpp */,
				F271D1B4222FFBB8005606F5 /* Diameter of Binary Tree.cpp */,
				F271D1B1222FFBB8005606F5 /* Binary Tree Level Order Traversal II.cpp */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		F271D1B5222FFBB8005606F5 /* Medium */ = {
			isa = PBXGroup;
			children = (
				F271D1B6222FFBB8005606F5 /* Binary Tree Level Order Traversal.cpp */,
				F271D1B7222FFBB8005606F5 /* Binary Tree Inorder Traversal.cpp */,
				F271D1B8222FFBB8005606F5 /* Flatten Binary Tree to Linked List.cpp */,
				F23D92BF2232A6EB00F0B9EC /* Path Sum II.cpp */,
			);
			path = Medium;
			sourceTree = "<group>";
		};
		F271D1B9222FFBB8005606F5 /* Stack */ = {
			isa = PBXGroup;
			children = (
				F271D1BA222FFBB8005606F5 /* Easy */,
			);
			path = Stack;
			sourceTree = "<group>";
		};
		F271D1BA222FFBB8005606F5 /* Easy */ = {
			isa = PBXGroup;
			children = (
				F271D1BB222FFBB8005606F5 /* Backspace String Compare.cpp */,
				F271D1BC222FFBB8005606F5 /* Baseball Game.cpp */,
				F271D1BD222FFBB8005606F5 /* Implement Stack using Queues.cpp */,
				F271D1BE222FFBB8005606F5 /* Implement Queue using Stacks.cpp */,
				F271D1BF222FFBB8005606F5 /* Min Stack.cpp */,
				F271D1C0222FFBB8005606F5 /* Next Greater Element I.cpp */,
				F271D1C1222FFBB8005606F5 /* Valid Parentheses.cpp */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		F271D1C2222FFBB8005606F5 /* Math */ = {
			isa = PBXGroup;
			children = (
				F271D1C3222FFBB8005606F5 /* Easy */,
			);
			path = Math;
			sourceTree = "<group>";
		};
		F271D1C3222FFBB8005606F5 /* Easy */ = {
			isa = PBXGroup;
			children = (
				F271D1C4222FFBB8005606F5 /* Plus One.cpp */,
				F271D1C5222FFBB8005606F5 /* Happy Number.cpp */,
				F271D1C6222FFBB8005606F5 /* Count Primes.cpp */,
				F271D1C7222FFBB8005606F5 /* Two Sum.cpp */,
				F271D1C8222FFBB8005606F5 /* Missing Number.cpp */,
				F271D1C9222FFBB8005606F5 /* Add Binary.cpp */,
				F271D1CA222FFBB8005606F5 /* Reverse Integer.cpp */,
				F271D1CB222FFBB8005606F5 /* Majority Element.cpp */,
				F271D1CC222FFBB8005606F5 /* Sqrt(x).cpp */,
				F271D1CD222FFBB8005606F5 /* Power of Three.cpp */,
				F271D1CE222FFBB8005606F5 /* Excel Sheet Column Number.cpp */,
				F271D1CF222FFBB8005606F5 /* Ugly Number.cpp */,
				F271D1D0222FFBB8005606F5 /* Factorial Trailing Zeroes.cpp */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		F271D1D1222FFBB8005606F5 /* Linked List */ = {
			isa = PBXGroup;
			children = (
				F271D1D2222FFBB8005606F5 /* Easy */,
				F271D1DD222FFBB8005606F5 /* Medium */,
			);
			path = "Linked List";
			sourceTree = "<group>";
		};
		F271D1D2222FFBB8005606F5 /* Easy */ = {
			isa = PBXGroup;
			children = (
				F271D1D3222FFBB8005606F5 /* Intersection of Two Linked Lists.cpp */,
				F271D1D4222FFBB8005606F5 /* Remove Linked List Elements.cpp */,
				F271D1D5222FFBB8005606F5 /* Design Linked List.cpp */,
				F271D1D6222FFBB8005606F5 /* Merge Two Sorted Lists.cpp */,
				F271D1D7222FFBB8005606F5 /* Linked List Cycle.cpp */,
				F271D1D8222FFBB8005606F5 /* Middle of the Linked List.cpp */,
				F271D1D9222FFBB8005606F5 /* Remove Duplicates from Sorted List.cpp */,
				F271D1DA222FFBB8005606F5 /* Palindrome Linked List.cpp */,
				F271D1DB222FFBB8005606F5 /* Reverse Linked List.cpp */,
				F271D1DC222FFBB8005606F5 /* Delete Node in a Linked List.cpp */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		F271D1DD222FFBB8005606F5 /* Medium */ = {
			isa = PBXGroup;
			children = (
				F271D1DE222FFBB8005606F5 /* Add Two Numbers.cpp */,
				F271D1DF222FFBB8005606F5 /* Linked List Cycle II.cpp */,
			);
			path = Medium;
			sourceTree = "<group>";
		};
		F271D1E0222FFBB8005606F5 /* String */ = {
			isa = PBXGroup;
			children = (
				F271D1E1222FFBB8005606F5 /* Easy */,
				F271D1EC222FFBB8005606F5 /* Medium */,
			);
			path = String;
			sourceTree = "<group>";
		};
		F271D1E1222FFBB8005606F5 /* Easy */ = {
			isa = PBXGroup;
			children = (
				F271D1E2222FFBB8005606F5 /* Fizz Buzz.cpp */,
				F271D1E3222FFBB8005606F5 /* Roman to Integer.cpp */,
				F271D1E4222FFBB8005606F5 /* Repeated Substring Pattern.cpp */,
				F271D1E5222FFBB8005606F5 /* CountAndSay.cpp */,
				F271D1E6222FFBB8005606F5 /* Reverse String.cpp */,
				F271D1E7222FFBB8005606F5 /* Implement strStr().cpp */,
				F271D1E8222FFBB8005606F5 /* To Lower Case.cpp */,
				F271D1E9222FFBB8005606F5 /* Add Binary.cpp */,
				F271D1EA222FFBB8005606F5 /* Valid Palindrome.cpp */,
				F271D1EB222FFBB8005606F5 /* Longest Common Prefix.cpp */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		F271D1EC222FFBB8005606F5 /* Medium */ = {
			isa = PBXGroup;
			children = (
				F271D1ED222FFBB8005606F5 /* Multiply Strings.cpp */,
				F271D1EE222FFBB8005606F5 /* Integer to Roman.cpp */,
				F271D1EF222FFBB8005606F5 /* Longest Substring Without Repeating Characters.cpp */,
			);
			path = Medium;
			sourceTree = "<group>";
		};
		F271D1F0222FFBB8005606F5 /* Bit Manipulation */ = {
			isa = PBXGroup;
			children = (
				F271D1F1222FFBB8005606F5 /* Easy */,
				F271D1F7222FFBB8005606F5 /* Medium */,
			);
			path = "Bit Manipulation";
			sourceTree = "<group>";
		};
		F271D1F1222FFBB8005606F5 /* Easy */ = {
			isa = PBXGroup;
			children = (
				F271D1F2222FFBB8005606F5 /* Reverse Bits.cpp */,
				F271D1F3222FFBB8005606F5 /* Hamming Distance.cpp */,
				F271D1F4222FFBB8005606F5 /* Number of 1 Bits.cpp */,
				F271D1F5222FFBB8005606F5 /* Single Number.cpp */,
				F271D1F6222FFBB8005606F5 /* Sum of Two Integers.cpp */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		F271D1F7222FFBB8005606F5 /* Medium */ = {
			isa = PBXGroup;
			children = (
				F271D1F8222FFBB8005606F5 /* Counting Bits.cpp */,
			);
			path = Medium;
			sourceTree = "<group>";
		};
		F271D1F9222FFBB8005606F5 /* Array */ = {
			isa = PBXGroup;
			children = (
				F271D1FA222FFBB8005606F5 /* Easy */,
				F271D203222FFBB8005606F5 /* Medium */,
			);
			path = Array;
			sourceTree = "<group>";
		};
		F271D1FA222FFBB8005606F5 /* Easy */ = {
			isa = PBXGroup;
			children = (
				F271D1FB222FFBB8005606F5 /* Find All Numbers Disappeared in an Array.cpp */,
				F271D1FC222FFBB8005606F5 /* Merge Sorted Array.cpp */,
				F271D1FD222FFBB8005606F5 /* Pascal's Triangle.cpp */,
				F271D1FE222FFBB8005606F5 /* Rotate Array.cpp */,
				F271D1FF222FFBB8005606F5 /* Shortest Unsorted Continuous Subarray.cpp */,
				F271D200222FFBB8005606F5 /* Remove Duplicates from Sorted Array.cpp */,
				F271D201222FFBB8005606F5 /* Move Zeroes.cpp */,
				F271D202222FFBB8005606F5 /* Fibonacci Number.cpp */,
				F23D92C7223417B100F0B9EC /* Sort Array By Parity II.cpp */,
			);
			path = Easy;
			sourceTree = "<group>";
		};
		F271D203222FFBB8005606F5 /* Medium */ = {
			isa = PBXGroup;
			children = (
				F271D204222FFBB8005606F5 /* Product of Array Except Self.cpp */,
				F271D25F22317417005606F5 /* Majority Element II.cpp */,
			);
			path = Medium;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		F25A37DD221561E000E24058 /* Algorithm */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = F25A37E5221561E000E24058 /* Build configuration list for PBXNativeTarget "Algorithm" */;
			buildPhases = (
				F25A37DA221561E000E24058 /* Sources */,
				F25A37DB221561E000E24058 /* Frameworks */,
				F25A37DC221561E000E24058 /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Algorithm;
			productName = Algorithm;
			productReference = F25A37DE221561E000E24058 /* Algorithm */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		F25A37D6221561E000E24058 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1000;
				ORGANIZATIONNAME = JohnLee;
				TargetAttributes = {
					F25A37DD221561E000E24058 = {
						CreatedOnToolsVersion = 10.0;
					};
				};
			};
			buildConfigurationList = F25A37D9221561E000E24058 /* Build configuration list for PBXProject "Algorithm" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = F25A37D5221561E000E24058;
			productRefGroup = F25A37DF221561E000E24058 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				F25A37DD221561E000E24058 /* Algorithm */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		F25A37DA221561E000E24058 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F271D25B222FFBB9005606F5 /* Remove Duplicates from Sorted Array.cpp in Sources */,
				F271D222222FFBB8005606F5 /* Flatten Binary Tree to Linked List.cpp in Sources */,
				F271D215222FFBB8005606F5 /* Same Tree.cpp in Sources */,
				F271D21F222FFBB8005606F5 /* Diameter of Binary Tree.cpp in Sources */,
				F25A37E2221561E000E24058 /* main.cpp in Sources */,
				F271D217222FFBB8005606F5 /* Convert Sorted Array to Binary Search Tree.cpp in Sources */,
				F271D20A222FFBB8005606F5 /* House Robber.cpp in Sources */,
				F271D232222FFBB9005606F5 /* Sqrt(x).cpp in Sources */,
				F271D24F222FFBB9005606F5 /* Longest Substring Without Repeating Characters.cpp in Sources */,
				F271D240222FFBB9005606F5 /* Delete Node in a Linked List.cpp in Sources */,
				F271D20E222FFBB8005606F5 /* Find All Anagrams in a String.cpp in Sources */,
				F271D213222FFBB8005606F5 /* QuickSort.cpp in Sources */,
				F271D237222FFBB9005606F5 /* Intersection of Two Linked Lists.cpp in Sources */,
				F271D248222FFBB9005606F5 /* Implement strStr().cpp in Sources */,
				F271D223222FFBB8005606F5 /* Backspace String Compare.cpp in Sources */,
				F271D23A222FFBB9005606F5 /* Merge Two Sorted Lists.cpp in Sources */,
				F271D206222FFBB8005606F5 /* Min Cost Climbing Stairs.cpp in Sources */,
				F271D21B222FFBB8005606F5 /* Convert BST to Greater Tree.cpp in Sources */,
				F271D22A222FFBB9005606F5 /* Plus One.cpp in Sources */,
				F271D24E222FFBB9005606F5 /* Integer to Roman.cpp in Sources */,
				F271D231222FFBB9005606F5 /* Majority Element.cpp in Sources */,
				F271D22B222FFBB9005606F5 /* Happy Number.cpp in Sources */,
				F271D247222FFBB9005606F5 /* Reverse String.cpp in Sources */,
				F271D249222FFBB9005606F5 /* To Lower Case.cpp in Sources */,
				F271D239222FFBB9005606F5 /* Design Linked List.cpp in Sources */,
				F271D20C222FFBB8005606F5 /* Jewels and Stones.cpp in Sources */,
				F271D227222FFBB9005606F5 /* Min Stack.cpp in Sources */,
				F271D205222FFBB8005606F5 /* Best Time to Buy and Sell Stock.cpp in Sources */,
				F271D235222FFBB9005606F5 /* Ugly Number.cpp in Sources */,
				F271D25E222FFBB9005606F5 /* Product of Array Except Self.cpp in Sources */,
				F271D21A222FFBB8005606F5 /* Path Sum III.cpp in Sources */,
				F271D221222FFBB8005606F5 /* Binary Tree Inorder Traversal.cpp in Sources */,
				F271D224222FFBB9005606F5 /* Baseball Game.cpp in Sources */,
				F271D24C222FFBB9005606F5 /* Longest Common Prefix.cpp in Sources */,
				F271D218222FFBB8005606F5 /* Symmetric Tree.cpp in Sources */,
				F271D25A222FFBB9005606F5 /* Shortest Unsorted Continuous Subarray.cpp in Sources */,
				F271D209222FFBB8005606F5 /* Range Sum Query - Immutable.cpp in Sources */,
				F271D230222FFBB9005606F5 /* Reverse Integer.cpp in Sources */,
				F271D20D222FFBB8005606F5 /* Intersection of Two Arrays II.cpp in Sources */,
				F271D21E222FFBB8005606F5 /* Merge Two Binary Trees.cpp in Sources */,
				F271D23E222FFBB9005606F5 /* Palindrome Linked List.cpp in Sources */,
				F271D245222FFBB9005606F5 /* Repeated Substring Pattern.cpp in Sources */,
				F271D257222FFBB9005606F5 /* Merge Sorted Array.cpp in Sources */,
				F271D244222FFBB9005606F5 /* Roman to Integer.cpp in Sources */,
				F271D225222FFBB9005606F5 /* Implement Stack using Queues.cpp in Sources */,
				F271D255222FFBB9005606F5 /* Counting Bits.cpp in Sources */,
				F271D20B222FFBB8005606F5 /* Find the Difference.cpp in Sources */,
				F271D22D222FFBB9005606F5 /* Two Sum.cpp in Sources */,
				F271D259222FFBB9005606F5 /* Rotate Array.cpp in Sources */,
				F271D212222FFBB8005606F5 /* Intersection of Two Arrays.cpp in Sources */,
				F271D208222FFBB8005606F5 /* Maximum Subarray.cpp in Sources */,
				F271D242222FFBB9005606F5 /* Linked List Cycle II.cpp in Sources */,
				F271D22E222FFBB9005606F5 /* Missing Number.cpp in Sources */,
				F271D21C222FFBB8005606F5 /* Binary Tree Level Order Traversal II.cpp in Sources */,
				F271D24A222FFBB9005606F5 /* Add Binary.cpp in Sources */,
				F23D92BE2232A69B00F0B9EC /* Path Sum.cpp in Sources */,
				F271D24D222FFBB9005606F5 /* Multiply Strings.cpp in Sources */,
				F23D92C8223417B100F0B9EC /* Sort Array By Parity II.cpp in Sources */,
				F271D228222FFBB9005606F5 /* Next Greater Element I.cpp in Sources */,
				F271D20F222FFBB8005606F5 /* First Unique Character in a String.cpp in Sources */,
				F271D24B222FFBB9005606F5 /* Valid Palindrome.cpp in Sources */,
				F271D229222FFBB9005606F5 /* Valid Parentheses.cpp in Sources */,
				F271D226222FFBB9005606F5 /* Implement Queue using Stacks.cpp in Sources */,
				F271D246222FFBB9005606F5 /* CountAndSay.cpp in Sources */,
				F271D243222FFBB9005606F5 /* Fizz Buzz.cpp in Sources */,
				F271D251222FFBB9005606F5 /* Hamming Distance.cpp in Sources */,
				F271D23B222FFBB9005606F5 /* Linked List Cycle.cpp in Sources */,
				F271D238222FFBB9005606F5 /* Remove Linked List Elements.cpp in Sources */,
				F271D236222FFBB9005606F5 /* Factorial Trailing Zeroes.cpp in Sources */,
				F271D26022317417005606F5 /* Majority Element II.cpp in Sources */,
				F271D207222FFBB8005606F5 /* Climbing Stairs.cpp in Sources */,
				F23D92C02232A6EB00F0B9EC /* Path Sum II.cpp in Sources */,
				F271D21D222FFBB8005606F5 /* Invert Binary Tree.cpp in Sources */,
				F271D252222FFBB9005606F5 /* Number of 1 Bits.cpp in Sources */,
				F271D23F222FFBB9005606F5 /* Reverse Linked List.cpp in Sources */,
				F271D23D222FFBB9005606F5 /* Remove Duplicates from Sorted List.cpp in Sources */,
				F271D210222FFBB8005606F5 /* Valid Anagram.cpp in Sources */,
				F271D22F222FFBB9005606F5 /* Add Binary.cpp in Sources */,
				F271D256222FFBB9005606F5 /* Find All Numbers Disappeared in an Array.cpp in Sources */,
				F271D250222FFBB9005606F5 /* Reverse Bits.cpp in Sources */,
				F271D23C222FFBB9005606F5 /* Middle of the Linked List.cpp in Sources */,
				F271D220222FFBB8005606F5 /* Binary Tree Level Order Traversal.cpp in Sources */,
				F271D216222FFBB8005606F5 /* Maximum Depth of Binary Tree.cpp in Sources */,
				F271D219222FFBB8005606F5 /* Two Sum IV - Input is a BST.cpp in Sources */,
				F271D234222FFBB9005606F5 /* Excel Sheet Column Number.cpp in Sources */,
				F23D92C4223415EE00F0B9EC /* Squares of a Sorted Array.cpp in Sources */,
				F271D241222FFBB9005606F5 /* Add Two Numbers.cpp in Sources */,
				F271D25C222FFBB9005606F5 /* Move Zeroes.cpp in Sources */,
				F271D211222FFBB8005606F5 /* Contains Duplicate.cpp in Sources */,
				F271D233222FFBB9005606F5 /* Power of Three.cpp in Sources */,
				F271D25D222FFBB9005606F5 /* Fibonacci Number.cpp in Sources */,
				F271D253222FFBB9005606F5 /* Single Number.cpp in Sources */,
				F271D258222FFBB9005606F5 /* Pascal's Triangle.cpp in Sources */,
				F271D214222FFBB8005606F5 /* Subtree of Another Tree.cpp in Sources */,
				F271D254222FFBB9005606F5 /* Sum of Two Integers.cpp in Sources */,
				F271D22C222FFBB9005606F5 /* Count Primes.cpp in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		F25A37E3221561E000E24058 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "Mac Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
			};
			name = Debug;
		};
		F25A37E4221561E000E24058 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "Mac Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
			};
			name = Release;
		};
		F25A37E6221561E000E24058 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = JGRNKP3327;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "$(SRCROOT)/Algorithm/PrefixHeader.pch";
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		F25A37E7221561E000E24058 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = JGRNKP3327;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "$(SRCROOT)/Algorithm/PrefixHeader.pch";
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		F25A37D9221561E000E24058 /* Build configuration list for PBXProject "Algorithm" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				F25A37E3221561E000E24058 /* Debug */,
				F25A37E4221561E000E24058 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		F25A37E5221561E000E24058 /* Build configuration list for PBXNativeTarget "Algorithm" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				F25A37E6221561E000E24058 /* Debug */,
				F25A37E7221561E000E24058 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = F25A37D6221561E000E24058 /* Project object */;
}
